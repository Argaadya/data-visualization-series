shinyServer(
    function(input, output) {
    # stock card - stock price ------------------------------------------------
        
        output$stock_price <- renderHighchart({
            
          con2 <- dbConnect(MySQL(),
                            user = "Alvin",
                            password = "Incorrect123",
                            dbname = "researchdb",
                            host = "192.168.10.83")
          con <- con2
          conn <- con2
          
            # parameterize
            
            get_ticker <- input$ticker_sp
            ma_ordo <- 30
            currency <- input$curr_sp # IDR or USD
            chart_type <- input$chart_sp # candlestick, line, column, area
        
            # get data
            
            pxstocks_data <- tbl(conn, "lv3_px_stocks") %>% 
                filter(Ticker == get_ticker, Fields %in% c("PX Open", "PX High", "PX Low", "PX Last", "Volume")) %>% 
                collect()
            
            
            usd_idr <- tbl(conn, "lv3_px_currency") %>%
                filter(Ticker == "USD-IDR") %>% 
                select(Date, Value) %>%
                collect() %>% 
                mutate_at("Date", ymd) 
            

            
            date_flags <- ymd(c("2017-04-17", "2019-08-17"))
            title_flags <- c("#E1", "#E2")
            text_flags <- c("An interesting event #1", "An interesting event #2")
            
            
            flags <- data_frame(
                date = date_flags,
                title = title_flags,
                text = text_flags
            )
            
            # data aggregation
            
            pxstocks_agg <- pxstocks_data %>% 
                select(-ID_Unique) %>% 
                mutate_at("Date", ymd) %>% 
                left_join(usd_idr, by = "Date") %>%
                mutate(Value.x = case_when(currency == "USD" ~ Value.x/Value.y,
                                           TRUE ~ Value.x)) %>%
                select(-Value.y) %>%
                pivot_wider(names_from = Fields, values_from = Value.x) %>% 
                rename(
                    PX.High = `PX High`,
                    PX.Close = `PX Last`,
                    PX.Open = `PX Open`,
                    PX.Low = `PX Low`
                ) %>% 
                filter(complete.cases(.)) %>% 
                mutate(
                    MA = rollapplyr(PX.Close, 30, mean, na.rm = TRUE, fill = NA),
                    STD = rollapplyr(PX.Close, 30, sd, na.rm = TRUE, fill = NA),
                    Upper_Boll = MA + 2*STD,
                    Lower_Boll = MA - 2*STD,
                    RSI = RSI(PX.Close)
                )
            
            # data viz
            
            pxstocks_datviz <- xts(x = pxstocks_agg %>% select(PX.Open, PX.High, PX.Low,
                                                               PX.Close, Volume, MA, RSI,
                                                               Upper_Boll, Lower_Boll),
                                   order.by = pxstocks_agg$Date)
            
            # highcharts
            
            lapply(dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
            
            highchart(type = "stock") %>%
                hc_yAxis_multiples(
                    create_yaxis(3, heights = c(3,1,1), turnopposite = TRUE)
                ) %>%
                hc_add_series(pxstocks_datviz, yAxis = 0, name = get_ticker, id = "stock", type = chart_type) %>%
                hc_add_series(pxstocks_datviz$MA,  yAxis = 0, name = "MA") %>%
                hc_add_series(pxstocks_datviz$Upper_Boll,  yAxis = 0, name = "upper") %>%
                hc_add_series(pxstocks_datviz$Lower_Boll,  yAxis = 0, name = "lower") %>%
                hc_add_series(flags, hcaes(x = date),
                              type = "flags", onSeries = "stock") %>% 
                hc_add_series(pxstocks_datviz$Volume, yAxis = 1, name = "Volume", type = "column") %>%
                hc_add_series(pxstocks_datviz$RSI, yAxis = 2, name = "RSI") %>% 
                hc_tooltip(split = FALSE, shared = TRUE) %>% 
                hc_plotOptions(
                    series = list(
                        fillOpacity = 0.1
                    )
                ) %>% 
                hc_title(text = "This is a title with <i>margin</i> and <b>Strong or bold text</b>",
                         margin = 20, align = "left",
                         style = list(color = "#ffc000", useHTML = TRUE)) %>%
                hc_subtitle(text = "And this is a subtitle with more information",
                            align = "left", style = list(color = "#2b908f", fontWeight = "bold")) %>% 
                hc_add_theme(hc_theme_monokai()) %>% 
                hc_size(height = 600)
            
        })
    
        

    # stock card - valuation chart | absolute --------------------------------------------

        
    output$val_abs_chart <- renderHighchart({
        
      con2 <- dbConnect(MySQL(),
                        user = "Alvin",
                        password = "Incorrect123",
                        dbname = "researchdb",
                        host = "192.168.10.83")
      con <- con2
      conn <- con2
      
        ## parameterize
        
        input_ticker <- input$ticker_val
        input_fields <- input$field_val
        input_index  <- input$index_val
        input_ordo   <- 30
        
        ## get data
        
        lv4_px_stocks_valuation <- tbl(conn, "lv4_px_stocks_valuation") %>% 
            filter(Ticker == input_ticker & Fields == input_fields) %>% 
            select(-ID_Unique) %>% 
            collect()
        
        ## data aggregation
        
        absolute_agg <- lv4_px_stocks_valuation %>% 
            select(Date, Value) %>% 
            mutate(
                Date = ymd(Date),
                MA =  rollapplyr(Value, input_ordo, mean, na.rm = TRUE, fill = NA),
                mean_flat = mean(Value, na.rm = TRUE),
                upper_bound1 = mean(Value, na.rm = TRUE) + sd(Value, na.rm = TRUE),
                upper_bound2 = mean(Value, na.rm = TRUE) + 2*sd(Value, na.rm = TRUE), 
                lower_bound1 = mean(Value, na.rm = TRUE) - sd(Value, na.rm = TRUE), 
                lower_bound2 = mean(Value, na.rm = TRUE) - 2*sd(Value, na.rm = TRUE)
            ) %>% 
            rename(!! input_fields := Value) %>% 
            mutate_if(is.numeric, ~round(., digits = 2))
        
        ## data vis
        
        absolute_vis <- xts(absolute_agg %>% select(-Date), order.by = absolute_agg$Date)
        
        ## highcharts
        
        lapply(dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
        
        absolute <- highchart(type = "stock") %>% 
            hc_add_series(absolute_vis$PE, name = input_fields) %>% 
            hc_add_series(absolute_vis$upper_bound1, name = "1std", dashStyle = "shortdash", color = "gray") %>%
            hc_add_series(absolute_vis$lower_bound1, name = "1std", dashStyle = "shortdash", color = "gray") %>%
            hc_add_series(absolute_vis$upper_bound2, name = "2std", dashStyle = "longdash", color = "gray") %>%
            hc_add_series(absolute_vis$lower_bound2, name = "2std", dashStyle = "longdash", color = "gray") %>%
            hc_add_series(absolute_vis$MA, name = "MA", dashStyle = "shortdash") %>%
            hc_title(text = "This is a title with <i>margin</i> and <b>Strong or bold text</b>",
                     margin = 20, align = "left",
                     style = list(color = "#ffc000", useHTML = TRUE)) %>%
            hc_subtitle(text = "And this is a subtitle with more information",
                        align = "left", style = list(color = "#2b908f", fontWeight = "bold")) %>% 
            hc_tooltip(split = FALSE, shared = TRUE) %>% 
            hc_add_theme(hc_theme_monokai())
        
        # hw_grid(absolute, tosector, toindex, rowheight = 520, ncol = 3) %>% 
        #     htmltools::browsable()
        
        absolute
        
    })    
    

    # stock card - valuation chart | relative to sector -----------------------

    
    
    output$val_sec_chart <- renderHighchart({
        
      con2 <- dbConnect(MySQL(),
                        user = "Alvin",
                        password = "Incorrect123",
                        dbname = "researchdb",
                        host = "192.168.10.83")
      con <- con2
      conn <- con2
      
        Input.Grouping <- "JCI_Group"
        Input.Index <- "JCI"
        ## parameterize
        
        input_ticker <- input$ticker_val
        input_fields <- input$field_val
        input_index  <- input$index_val
        input_ordo   <- 30
        
        
        ### Step 1 - Load & Manipulate Stocks Data
        
        lv2_stocks <- tbl(conn,"lv2_stocks") %>% collect()
        
        lv4_px_stocks_valuation <- tbl(conn,"lv4_px_stocks_valuation") %>% 
            filter(Ticker %in% "AALI") %>% 
            collect() %>% 
            select(-1) %>% 
            left_join(
                select(lv2_stocks, Ticker, Input.Grouping),  by = c("Ticker")
            ) %>% 
            rename(
                Sector := !!Input.Grouping
            )
        
        
        ### Step 2 - Load Sector Data
        
        lv4_px_sector_valutaion <- tbl(conn,"lv4_px_sector_valuation") %>% 
            filter(Grouping == Input.Grouping) %>% 
            collect() %>% 
            select(-1) %>% 
            rename(Sector="Ticker")
        
        ### Step 3 - Join Stocks & Sector
        
        relative_to_sector <- lv4_px_stocks_valuation %>% 
            left_join(lv4_px_sector_valutaion, by=c("Date","Fields","Sector")) %>% 
            filter(Date >= "2010-01-01") %>% 
            mutate(Value = Value.x/Value.y-1) %>% 
            filter(!is.na(Value), Fields == input_fields) %>% 
            select(Ticker, Fields, Date, Value)
        
        # Highcharts relative to sector
        
        rel_sector_agg <- relative_to_sector %>% 
            mutate(
                MA = rollapplyr(
                    Value, input_ordo, mean, na.rm = TRUE, fill = NA
                ),
                Date = ymd(Date)
            ) %>% 
            mutate_if(is.numeric, ~round(., digits = 2))
        
        rel_sector_davis <- xts(
            rel_sector_agg %>% 
                select(-c(Date, Fields, Ticker)),
            order.by = rel_sector_agg$Date
        )
        
        tosector <- highchart(type = "stock") %>% 
            hc_add_series(rel_sector_davis$Value, type = "line") %>% 
            hc_add_series(rel_sector_davis$MA, dashStyle = "shortdash") %>% 
            hc_title(text = "This is a title with <i>margin</i> and <b>Strong or bold text</b>",
                     margin = 20, align = "left",
                     style = list(color = "#ffc000", useHTML = TRUE)) %>%
            hc_subtitle(text = "And this is a subtitle with more information",
                        align = "left", style = list(color = "#2b908f", fontWeight = "bold")) %>% 
            hc_tooltip(split = FALSE, shared = TRUE) %>% 
            hc_add_theme(hc_theme_monokai())
        
        tosector
        
    })
    

    # stock card - valuation chart | relative to index ------------------------

    
    output$val_idx_chart <- renderHighchart({
        
      con2 <- dbConnect(MySQL(),
                        user = "Alvin",
                        password = "Incorrect123",
                        dbname = "researchdb",
                        host = "192.168.10.83")
      con <- con2
      conn <- con2
      
        # Relative to Index
        
        input_ticker <- input$ticker_val
        input_fields <- input$field_val
        
        lv4_px_stocks_valuation <- tbl(conn, "lv4_px_stocks_valuation") %>% 
            filter(Ticker == input_ticker & Fields == input_fields) %>% 
            select(-ID_Unique) %>% 
            collect()
        
        Input.Grouping <- "JCI_Group"
        Input.Index <- "JCI"
        ## parameterize
        
        input_ticker <- input$ticker_val
        input_fields <- input$field_val
        input_index  <- input$index_val
        input_ordo   <- 30
        
        lv4_px_index_valuation <- tbl(conn,"lv4_px_index_valuation") %>% 
            filter(Ticker %in% input_index, Fields == input_fields)%>% 
            collect() %>% 
            select(-1)
        
        relative_to_index <- lv4_px_stocks_valuation %>% 
            filter(Fields == input_fields) %>% 
            left_join(lv4_px_index_valuation, by=c("Date")) %>% 
            filter(Date>="2010-01-01") %>% 
            mutate(Value = Value.x/Value.y-1) %>% 
            filter(!is.na(Value)) %>% 
            select(Date, Value)
        
        
        rel_index_agg <- relative_to_index %>% 
            mutate(
                MA = rollapplyr(
                    Value, input_ordo, mean, na.rm = TRUE, fill = NA
                ),
                Date = ymd(Date)
            ) %>% 
            mutate_if(is.numeric, ~round(., digits = 2))
        
        rel_index_davis <- xts(
            rel_index_agg %>% select(-Date),
            order.by = rel_index_agg$Date
        )
        
        toindex <- highchart(type = "stock") %>% 
            hc_add_series(rel_index_davis$Value, type = "line") %>% 
            hc_add_series(rel_index_davis$MA, dashStyle = "shortdash") %>% 
            hc_title(text = "This is a title with <i>margin</i> and <b>Strong or bold text</b>",
                     margin = 20, align = "left",
                     style = list(color = "#ffc000", useHTML = TRUE)) %>%
            hc_subtitle(text = "And this is a subtitle with more information",
                        align = "left", style = list(color = "#2b908f", fontWeight = "bold")) %>% 
            hc_tooltip(split = FALSE, shared = TRUE) %>% 
            hc_add_theme(hc_theme_monokai())
        
        
        toindex
        
    })
    
    
    # stock card - performance chart ------------------------------------------

        
    output$perf_chart <- renderHighchart({
        
      con2 <- dbConnect(MySQL(),
                        user = "Alvin",
                        password = "Incorrect123",
                        dbname = "researchdb",
                        host = "192.168.10.83")
      con <- con2
      conn <- con2
      
        # parameterize
        
        get_ticker_rp <- input$ticker_rp
        get_index_rp <- input$index_rp
        get_sector_rp <- input$sector_rp
        get_fields_rp <- input$field_rp
        
        # parameterize

        
            
        
        pxidx_data <-  tbl(conn, "lv3_px_index") %>% 
            filter(Ticker %in% get_index_rp, Fields == get_fields_rp) %>% 
            select(Date, Value) %>% 
            collect()
        
        stocks_data <- tbl(conn, "lv3_px_stocks") %>% 
            filter(Ticker %in% get_ticker_rp, Fields == get_fields_rp) %>% 
            select(Date, Value) %>% 
            collect()
        
        ticker_list_sector <- tbl(conn, "lv2_stocks") %>% 
            filter(Sector == get_sector_rp) %>% 
            select(Ticker) %>% 
            collect()
        
        stock_sector <- tbl(conn, "lv3_px_stocks") %>% 
            filter(Ticker %in% local(ticker_list_sector$Ticker), Fields == get_fields_rp) %>% 
            select(Date, Value) %>% 
            collect()
        
        # data aggregation
        
        rp_dat_agg <- stocks_data %>% 
            rename(!! get_ticker_rp := Value) %>% 
            left_join(pxidx_data %>%
                          rename(!! get_index_rp := Value)) %>% 
            left_join(stock_sector %>% 
                          group_by(Date) %>% 
                          summarise(!! get_sector_rp := mean(Value)) %>% 
                          ungroup()) %>% 
            mutate(Date = ymd(Date)) %>% 
            filter(complete.cases(.)) %>% 
            mutate_if(is.numeric, ~round(., digits = 2))
        
        # data viz
        
        rp_dat_vis <- xts(rp_dat_agg %>% select(-Date) , order.by = rp_dat_agg$Date)
        
        # highcharts
        lapply(dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
        
        highchart(type = "stock") %>% 
            hc_add_series(rp_dat_vis[,1], name = get_ticker_rp) %>% 
            hc_add_series(rp_dat_vis[,2], name = get_index_rp) %>% 
            hc_add_series(rp_dat_vis[,3], name = get_sector_rp) %>% 
            hc_plotOptions(series = list(compare= 'value', 
                                         compareStart = FALSE)) %>% 
            hc_title(text = "This is a title with <i>margin</i> and <b>Strong or bold text</b>",
                     margin = 20, align = "left",
                     style = list(color = "#ffc000", useHTML = TRUE)) %>%
            hc_subtitle(text = "And this is a subtitle with more information",
                        align = "left", style = list(color = "#2b908f", fontWeight = "bold")) %>% 
            hc_tooltip(split = FALSE, shared = TRUE) %>% 
            hc_yAxis(
                title = list(text = "Value"),
                opposite = FALSE
            ) %>% 
            hc_add_theme(hc_theme_monokai())
        
    })
    

    # stock card - force table ------------------------------------------------------

    
    
    output$tbl_force <- renderUI({
        
      con2 <- dbConnect(MySQL(),
                        user = "Alvin",
                        password = "Incorrect123",
                        dbname = "researchdb",
                        host = "192.168.10.83")
      con <- con2
      conn <- con2
        
        # get data
        
        input_ticker <- input$ticker_force
        input_fields <- input$fields_force
        
        flowksei_data <- tbl(conn, "lv3_flow_ksei") %>% 
            filter(Ticker==input_ticker & Fields==input_fields) %>% 
            collect()
        
        # data aggregation
        
        flowksei_agg <- flowksei_data %>%
            select(-ID_Unique) %>%
            mutate_at("Date", ymd) %>% 
            filter(Date >= floor_date(max(Date), "month") - months(6)) %>% 
            mutate(Date = as.character(format(Date, "%b %Y"))) %>% 
            pivot_wider(names_from = Date, values_from = Value) %>%
            select(-c(Ticker, Type, Fields))
        
        sparkline_data <- flowksei_agg %>% 
            pivot_longer(-Shareholder, names_to = "Date") %>%
            group_by(Shareholder) %>%
            summarize(
                TrendSparkline = spk_chr(
                    value, type ="line"
                )
            )
        
        # output table
        
        
        flowksei_vis <- flowksei_agg %>% 
            mutate_if(is.numeric, 
                      ~dollar_format(accuracy = 0.1, 
                                     scale = 10^-9, 
                                     suffix = " B")(.)) %>% 
            left_join(sparkline_data)
        
        lapply(dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
        
        table_out <- flowksei_vis %>% 
            format_table() %>% 
            htmltools::HTML() %>% 
            div() %>% 
            spk_add_deps()
        
        table_out
        
    })
    

    # stock card - force chart ------------------------------------------------

    
    
    output$force_chart <- renderHighchart({
        
      con2 <- dbConnect(MySQL(),
                        user = "Alvin",
                        password = "Incorrect123",
                        dbname = "researchdb",
                        host = "192.168.10.83")
      con <- con2
      conn <- con2  
      
        get_ticker_force <- "JCI"
        
        rules <- data.frame(shareholder = c("Foreign.Fund", "Local.MF", "Local.IS,Local.PF"),
                            Indices = c("MSCI,MSCI Small Cap", "JCI,Universe", "LQ45,IDX30"))
        
        get_rules <- 3
        
        get_indices <- function(){
            rules[get_rules,2] %>% 
                as.character() %>%
                strsplit(",") %>%
                unlist()
        }
        
        get_shareholder <- function(){
            rules[get_rules,1] %>% 
                as.character() %>%
                strsplit(",") %>%
                unlist()
        }
        
        ## get data
        
        market_cap <- tbl(conn, "lv3_px_index") %>% 
            filter(Ticker == get_ticker_force, Fields == "Market Cap") %>%
            collect() %>% 
            group_by(year = year(ymd(Date)), month = month(ymd(Date))) %>% 
            filter(Date == max(ymd(Date))) %>% 
            mutate(Date = floor_date(ymd(Date), unit = "month") + months(1) - days(1)) %>% 
            ungroup() %>% 
            select(Date, `Market Cap` = Value)
        
        ownership <- tbl(conn, "lv4_px_index_ownership") %>% 
            filter(Indices == get_ticker_force, Fields == "Ownership Value", Shareholder %in% local(get_shareholder())) %>% 
            select(Date, `Ownership Value` = Value) %>% 
            collect()
        
        ## data agg
        
        dat_agg <- ownership %>% 
            mutate_at("Date", ymd) %>% 
            left_join(market_cap, by = "Date") %>% 
            distinct_at( "Date", .keep_all = TRUE) %>% 
            mutate_at("Date", ymd)
        
        ## data vis
        
        dat_vis <- xts(dat_agg %>% select(-Date), order.by = dat_agg$Date)
        
        ## highcharts
        
        lapply(dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
        
        highchart(type = "stock") %>% 
            hc_yAxis_multiples(
                list(lineWidth = 3),
                list(showLastLabel = FALSE, opposite = FALSE)
            ) %>% 
            hc_add_series(data = dat_vis$`Ownership Value`, name = "Ownership") %>% 
            hc_add_series(data = dat_vis$`Market Cap`, yAxis = 1, name = "Market Cap") %>% 
            hc_title(text = "This is a title with <i>margin</i> and <b>Strong or bold text</b>",
                     margin = 20, align = "left",
                     style = list(color = "#ffc000", useHTML = TRUE)) %>%
            hc_subtitle(text = "And this is a subtitle with more information",
                        align = "left", style = list(color = "#2b908f", fontWeight = "bold")) %>% 
            hc_tooltip(split = FALSE, shared = TRUE) %>% 
            hc_add_theme(hc_theme_monokai())
        
        
    })
    

    # stock card - earning seasonality ----------------------------------------
    
    # scoring - technical -----------------------------------------------------

    
  
    output$tbl_tech <- DT::renderDataTable({
        
      con2 <- dbConnect(MySQL(),
                        user = "Alvin",
                        password = "Incorrect123",
                        dbname = "researchdb",
                        host = "192.168.10.83")
      con <- con2
      conn <- con2  
      
        input_ma <- input$ma_tech
        input_date <- input$date_tech
        input_max <- input$max_tech
        input_ticker <- input$ticker_tech
        
        lv3_px_stocks <- tbl(conn, "lv3_px_stocks") %>% 
            filter(Ticker %in% input_ticker, 
                   Fields %in% c("PX Last")) %>% 
            collect() %>% 
            filter(
                ymd(Date) >= input_date[1]
            )
        
        # bollinger band ----------------------------------------------------------
        
        bollinger <- lv3_px_stocks %>% 
          select(-ID_Unique) %>% 
          mutate_at("Date", ymd) %>% 
          pivot_wider(
            names_from = "Fields",
            values_from = "Value"
          ) %>% 
          rename(
            PX.Close = `PX Last`
          ) %>% 
          filter(complete.cases(.)) %>% 
          group_by(Ticker) %>% 
          mutate(
            MA = rollapplyr(PX.Close, input_ma, mean, na.rm = TRUE, fill = NA),
            STD = rollapplyr(PX.Close, input_ma, sd, na.rm = TRUE, fill = NA),
            Upper_Boll = MA + 2*STD,
            Lower_Boll = MA - 2*STD,
            RSI = RSI(PX.Close)
          ) %>% 
          select(-c(MA,STD,RSI)) %>% 
          ungroup() %>% 
          filter(complete.cases(.)) %>% 
          group_by(Ticker) %>% 
          pad() %>% 
          mutate(
            PX.Close = na.locf(PX.Close, fromLast = FALSE),
            Upper_Boll = na.locf(Upper_Boll, fromLast = FALSE),
            Lower_Boll = na.locf(Lower_Boll, fromLast = FALSE),
            Signal = case_when(
              PX.Close > Upper_Boll ~ "Sell",
              PX.Close < Lower_Boll ~ "Buy",
              TRUE ~ "Hold"
            ),
            Signal = case_when(
              Date == min(Date) ~ "Buy",
              TRUE ~ Signal
            ),
            `Cut Loss` = Date + days(input_max)
          ) %>% 
          select(Ticker, Date, `Cut Loss`, everything(.)) %>% 
          ungroup()
        
        # MACD --------------------------------------------------------------------
        
        n_fast <-  12
        n_slow <- 26
        n_sig <-  9
        
        
        macd_func <- function (price,fast,slow,signal){
          MA_fast <- EMA(price, fast)
          MA_slow <- EMA(price, slow)
          MACD <- MA_fast - MA_slow
          signal <- EMA(MACD, signal)
          output <- cbind(MA_fast, MA_slow, MACD, signal)
          colnames(output) <- c(paste0("MA",fast), paste0("MA", slow), "MACD","signal")
          output <- as_tibble(output)
          return(output)
        }
        
        macd <- lv3_px_stocks %>% 
          select(-ID_Unique) %>% 
          mutate_at("Date", ymd) %>% 
          pivot_wider(
            names_from = "Fields",
            values_from = "Value"
          ) %>% 
          rename(
            PX.Close = `PX Last`
          ) %>% 
          filter(complete.cases(.)) %>% 
          group_by(Ticker) %>% 
          mutate(
            `MA Fast` = EMA(PX.Close, n_fast),
            `MA Slow` = EMA(PX.Close, n_slow),
            `MACD` = `MA Fast` - `MA Slow`,
            Signal = EMA(`MACD`, n_sig),
            `+1SD` = mean(MACD, na.rm = TRUE) + sd(MACD, na.rm = TRUE),
            `-1SD` = mean(MACD, na.rm = TRUE) - sd(MACD, na.rm = TRUE)
          ) %>% 
          select(
            Ticker, Date, PX.Close, MACD, `+1SD`, `-1SD`
          ) %>% 
          ungroup() %>% 
          filter(complete.cases(.)) %>% 
          group_by(Ticker) %>% 
          pad() %>% 
          mutate(
            PX.Close = na.locf(PX.Close, fromLast = FALSE),
            MACD = na.locf(MACD, fromLast = FALSE),
            `+1SD` = na.locf(`+1SD`, fromLast = FALSE),
            `-1SD` = na.locf(`-1SD`, fromLast = FALSE),
            Signal = case_when(
              MACD < `-1SD` ~ "Buy",
              MACD > `+1SD` ~ "Sell",
              TRUE ~ "Ignore"
            ),
            Signal = case_when(
              Date == min(Date) ~ "Buy",
              TRUE ~ Signal
            ),
            `Cut Loss` = Date + days(30)
          ) %>% 
          select(Ticker, Date, `Cut Loss`, everything(.)) %>% 
          ungroup()
        
        
        
        # RSI ---------------------------------------------------------------------
        
        rsi_upper <- 70
        rsi_lower <- 30
        
        rsi <- lv3_px_stocks %>% 
          select(-ID_Unique) %>% 
          mutate_at("Date", ymd) %>% 
          pivot_wider(
            names_from = "Fields",
            values_from = "Value"
          ) %>% 
          rename(
            PX.Close = `PX Last`
          ) %>% 
          filter(complete.cases(.)) %>% 
          group_by(Ticker) %>% 
          mutate(
            RSI = RSI(price = PX.Close, n = 30)
          ) %>% 
          select(
            Ticker, Date, PX.Close, RSI
          ) %>% 
          ungroup() %>% 
          filter(complete.cases(.)) %>% 
          group_by(Ticker) %>% 
          pad() %>% 
          mutate(
            PX.Close = na.locf(PX.Close, fromLast = FALSE),
            RSI = na.locf(RSI, fromLast = FALSE),
            Upper = 70,
            Lower = 30,
            Signal = case_when(
              RSI > Upper ~ "Sell",
              RSI < Lower ~ "Buy",
              TRUE ~ "Ignore"
            ),
            Signal = case_when(
              Date == min(Date) ~ "Buy",
              TRUE ~ Signal
            ),
            `Cut Loss` = Date + days(input_max)
          ) %>% 
          select(Ticker, Date, `Cut Loss`, everything(.)) %>% 
          ungroup()
        
        
        # loop function -----------------------------------------------------------
        
        technical_func <- function(x){
          
          con2 <- dbConnect(MySQL(),
                            user = "Alvin",
                            password = "Incorrect123",
                            dbname = "researchdb",
                            host = "192.168.10.83")
          con <- con2
          conn <- con2
          
          date_buy <- x %>% 
            group_by(Ticker) %>% 
            filter(Signal == "Buy") %>% 
            arrange(Date) %>% 
            arrange(Ticker) %>% 
            mutate(
              duration = Date - lag(Date),
              duration = ifelse(
                is.na(duration), input_max + 1, duration
              )
            ) %>% 
            filter(duration >= input_max) %>%
            select(Date, `Cut Loss`, Signal) %>% 
            arrange(Ticker) %>% 
            ungroup() %>% 
            filter(complete.cases(.)) 
          
          date_sell <- x %>% 
            group_by(Ticker) %>% 
            filter(Signal == "Sell") %>% 
            select(Ticker, Date, Signal) %>% 
            arrange(Ticker) %>% 
            ungroup()
          
          ticker <- c()
          buy <- c() %>% ymd()
          sell <- c() %>% ymd()
          out <- data.frame()
          
          for (i in 1:nrow(date_buy)) {
            
            temp_ticker <- date_buy %>% 
              slice(i) %>% 
              pull(Ticker)
            
            temp_date <- date_buy %>% 
              slice(i) %>% 
              pull(Date)
            
            temp_cutloss <- date_buy %>% 
              slice(i) %>% 
              pull(`Cut Loss`)
            
            temp_data <- date_sell %>% 
              filter(
                Ticker == temp_ticker,
                Date > temp_date,
                Date <= temp_cutloss
              )
            
            if(nrow(temp_data) == 0){
              
              ticker[i] <- temp_ticker
              buy[i] <- temp_date
              sell[i] <- temp_cutloss
              
            } else {
              
              action_sell <- temp_data %>% 
                slice(1) %>% 
                pull(Date)
              
              ticker[i] <- temp_ticker
              buy[i] <- temp_date
              sell[i] <- action_sell
              
            }
            
            
            out <- tibble(
              "Ticker" = c(ticker),
              "Buy" = c(buy),
              "Sell" = c(sell)
            )
          }
          
          return <- out %>% 
            pivot_longer(cols = c(Buy, Sell),
                         names_to = "Action",
                         values_to = "Date") %>% 
            left_join(
              y = select(x, Date, Ticker,  PX.Close), 
              by = c("Ticker", "Date")
            ) %>% 
            group_by(
              Ticker
            ) %>% 
            mutate(
              Return = ifelse(
                Action == "Buy", lead(PX.Close, 1) / PX.Close - 1, "Ignore"
              )
            ) %>% 
            filter(Return != "Ignore") %>% 
            select(Date, Return)
          
          table <- out %>% 
            left_join(return, by = c("Buy" = "Date", "Ticker")) %>% 
            filter(complete.cases(.)) %>% 
            mutate(
              Return = as.numeric(Return)
            ) %>%
            group_by(Ticker) %>%
            summarise(
              Frequency = n(),
              `Mean Return` = mean(Return, na.rm = TRUE),
              `Median Return` = median(Return, na.rm = TRUE),
              `% Positive` = sum(Return > 0),
              `Max Return` = max(Return),
              `Min Return` = min(Return)
            ) %>% 
            mutate_if(is.numeric, ~round(., digits = 5)) %>% 
            ungroup()
          
        }
        
        
        dat <- list(rsi, bollinger, macd)
        
        out <- map(dat, technical_func)
        
        method_name <- c("rsi", "bollinger", "macd")
        
        table_out <- map2(out, method_name, ~bind_cols(.x, Method = .y) %>% 
               select(Ticker, Method, everything(.))) %>% 
          do.call(bind_rows, .) %>% 
          arrange(Ticker)
       
        lapply(dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect) 
       
       table_out %>% 
           DT::datatable(
               options = list(
                   scrollX = TRUE,
                   height = '500px'
               )
           )
        
        
    })
      

    # scoring - growth ranking ------------------------------------------------

    
    
    output$tbl_growth <- renderDataTable({
        
      con2 <- dbConnect(MySQL(),
                        user = "Alvin",
                        password = "Incorrect123",
                        dbname = "researchdb",
                        host = "192.168.10.83")
      con <- con2
      conn <- con2
        
        ranking_fun <- function(grp, grw, flds){
            temp_out <- FS.Sector.Growth.A %>% 
                select(-ID_Unique) %>% 
                filter(year(Date) == "2018") %>% 
                arrange(desc(Value)) %>% 
                group_by(Grouping, Fields, Growth) %>% 
                mutate(
                    `Ranking Grouping` = dense_rank(desc(Value))
                ) %>% 
                ungroup() %>%
                arrange(Fields, `Ranking Grouping`) %>%  
                filter(Grouping == grp) %>% 
                rename(!! grp := Ticker) %>% 
                select(-Value) %>% 
                left_join(
                    select(stock_absolute_long, Ticker, !! grp, Fields, Date, Growth, Value)
                ) %>% 
                group_by(.dots = grp, Fields, Growth) %>%
                mutate(
                    `Ranking Stock` = dense_rank(desc(Value))
                ) %>%
                ungroup() %>%
                # select(-Value) %>% 
                left_join(
                    select(stock_class_long, Ticker, !! grp, Fields, Date, Growth, Class)
                ) %>% 
                mutate(
                    Scoring = case_when(
                        Class == "Turning Profit" ~ 1000,
                        Class == "Low Base" ~ 2000,
                        Class == "Normal" ~ 3000,
                        Class == "Smaller Loss" ~ 4000,
                        Class == "Bigger Loss" ~ 5000,
                        Class == "Turning Loss" ~ 6000
                    )
                ) %>% 
                group_by(
                    Class, Growth
                ) %>% 
                mutate(
                    `Adj Rank` = dense_rank(desc(Value))
                ) %>% 
                ungroup() %>% 
                mutate(
                    `Ranking Stock` = case_when(
                        Class == "Normal" ~ Scoring + `Adj Rank`,
                        TRUE ~ Scoring 
                    )
                ) %>% 
                arrange(`Ranking Stock`)
            
            out <- temp_out %>% 
                filter(Fields == flds, Growth == grw) %>% 
                select(Ticker, !! grp, Fields, Growth, `Ranking Grouping`, `Ranking Stock`)
            
            return(out)
        }
        
        
        lapply(dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
        
        ranking_fun(grp = input$grp_growth, grw = input$growth_type, flds = input$field_growth) %>% 
            DT::datatable(
                options = list(
                    scrollX = TRUE,
                    height = '500px'
                )
            )
        
        
    })
    
    # Market Analysis - Customize Chart ---------------------------------------
    output$cust_chart <- renderUI({
      
      con2 <- dbConnect(MySQL(),
                        user = "Alvin",
                        password = "Incorrect123",
                        dbname = "researchdb",
                        host = "192.168.10.83")
      con <- con2
      conn <- con2
      
      dbListTables(conn)
      
      ## parameterize
      
      get_sector_val <- input$cust_sector
      get_fields_val <- input$cust_field
      ma_ordo <- input$cust_ma
      start_date <- input$cust_date[1]
      end_date <- input$cust_date[2]
      
      ## get data
      
      lv2_stocks <- tbl(conn, "lv2_stocks") %>% 
        filter(Sector %in% get_sector_val) %>% 
        collect() 
      
      
      lv4_px_stocks_valuation <- tbl(conn, "lv4_px_stocks_valuation") %>% 
        filter(Fields == get_fields_val, Date >= start_date, Date <= end_date) %>% 
        select(-ID_Unique) %>% 
        collect()
      
      ## data aggregation
      
      
      data_agg <- lv4_px_stocks_valuation %>% 
        right_join(select(lv2_stocks, Ticker, Sector), by = "Ticker") %>% 
        select(-Fields) %>% 
        filter(complete.cases(.)) %>%
        mutate_at("Date", ymd) %>% 
        group_by(Date, Sector) %>% 
        summarise(
          Value = sum(Value)
        ) %>% 
        ungroup() %>% 
        pivot_wider(
          names_from = "Sector",
          values_from = "Value"
        ) 
      
      
      ## highcharts

      lapply(dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
            
      map(
        data_agg %>% 
          select(-Date) %>% 
          colnames(),
        function(x){
          temp <- data_agg %>% 
            select(Date, x) %>% 
            mutate(
              MA =  rollapplyr(pull(., x), ma_ordo, mean, na.rm = TRUE, fill = NA),
              AVG = mean(pull(., x), na.rm = TRUE),
              SD =  sd(pull(., x), na.rm = TRUE),
              `+1SD` = AVG + SD,
              `+2SD` = AVG + 2*SD, 
              `-1SD` = AVG - SD, 
              `-2SD` = AVG - 2*SD
            ) %>% 
            mutate_if(is.numeric, ~round(., digits = 2))
          
          temp <- xts(temp %>% select(-Date), order.by = temp$Date)
          
          highchart(type = "stock") %>% 
            hc_add_series(
              data = temp[,1],
              name = x,
              type = "line"
            ) %>% 
            hc_add_series(
              temp$`+1SD`, 
              name = "1std", 
              dashStyle = "shortdash", 
              color = "gray"
            ) %>%
            hc_add_series(
              temp$`-1SD`, 
              name = "1std",
              dashStyle = "shortdash",
              color = "gray"
            ) %>%
            hc_add_series(
              temp$`+2SD`, 
              name = "2std", 
              dashStyle = "longdash",
              color = "gray"
            ) %>%
            hc_add_series(
              temp$`-2SD`, 
              name = "2std", 
              dashStyle = "longdash",
              color = "gray"
            ) %>%
            hc_add_series(
              temp$AVG, 
              name = "mean",
              dashStyle = "shortdash",
              color = "gray"
            ) %>%
            hc_add_series(
              temp$MA,
              name = "MA", 
              dashStyle = "shortdash"
            ) %>% 
            hc_title(
              text = str_to_title(x)
            ) %>% 
            hc_title(text = str_to_upper(x),
                     margin = 20, align = "left",
                     style = list(color = "#ffc000", fontWeight = "bold")) %>%
            hc_subtitle(text = "And this is a subtitle with more information",
                        align = "left", style = list(color = "#2b908f", fontWeight = "bold")) %>% 
            hc_tooltip(split = FALSE, shared = TRUE) %>% 
            hc_rangeSelector(
              enabled = FALSE
            ) %>% 
            hc_add_theme(hc_theme_monokai())
        }
      ) %>% 
        hw_grid(rowheight = 420, ncol = 3) %>%
        browsable()
      
      
      
    })
    
    # Marker Analysis - Flow by shareholder -----------------------------------
    output$flow_chart <- renderHighchart({
      
      con2 <- dbConnect(MySQL(),
                        user = "Alvin",
                        password = "Incorrect123",
                        dbname = "researchdb",
                        host = "192.168.10.83")
      con <- con2
      conn <- con2
      
      
      ticker_stock <- input$flow_ticker
      input_field <- input$flow_field
      
      list_shareholder <- c("Foreign.IF", "Foreign.PF", 
                            "Foreign.IS", 
                            "FOreign.MF", "Local.IS",
                            "Local.PF", "Local.MF",
                            "Local.ID", "Foreign.ID")
      
      stock_data <- tbl(conn, "lv3_px_stocks") %>% 
        filter(Ticker==ticker_stock, fields %in% input_field) %>% 
        select(c(Date, Value)) %>% 
        collect()
      
      
      lv4_stock_ownership <- tbl(conn, "lv4_px_stocks_ownership") %>% 
        filter(Ticker == ticker_stock, Fields == "Ownership Value", 
               Shareholder %in% list_shareholder,
               Indices == "JCI") %>% 
        collect()
      
      # data aggregation
      
      stock_agg <- stock_data %>% 
        mutate_at("Date", ymd) %>% 
        group_by(year = year(Date), month = month(Date)) %>% 
        filter(Date == max(Date)) %>% 
        mutate(Date = floor_date(Date, unit = "month") + months(1) - days(1)) %>% 
        ungroup() %>% 
        select(Date, Price = Value)
      
      stock_ownership_agg <- lv4_stock_ownership %>% 
        select(-c(ID_Unique, Ticker, Fields, Indices)) %>% 
        mutate_at("Date", ymd) %>% 
        group_by(Shareholder) %>% 
        mutate(Value = Value - lag(Value, n = 1)) %>% 
        ungroup() %>% 
        pivot_wider(names_from = "Shareholder", values_from = "Value") %>% 
        filter(complete.cases(.)) %>% 
        group_by(Date) %>% 
        summarise(
          `Foreign Fund` = Foreign.IS + Foreign.PF + Foreign.MF,
          `Insurance` = Local.IS + Local.PF,
          `Foreign Mutual Fund` = Local.MF,
          `Retail` = Local.ID + Foreign.ID
        ) %>% 
        ungroup() %>%
        left_join(stock_agg)
      
      # data vis
      
      data_vis <- xts(stock_ownership_agg %>% select(-Date), 
                      order.by = stock_ownership_agg$Date )
      
      # highcharts
      lapply(dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
      
      highchart(type = "stock") %>% 
        hc_yAxis_multiples(
          list(lineWidth = 1),
          list(opposite = FALSE)
        ) %>% 
        hc_plotOptions(column = list(stacking = "normal")) %>%
        hc_xAxis(
          categories = data_vis$Date
        ) %>% 
        hc_add_series(
          data = data_vis$`Foreign Fund`,
          name = "Foreign Fund",
          type = "column"
        ) %>% 
        hc_add_series(
          data = data_vis$Insurance,
          name = "Insurance",
          type = "column"
        ) %>% 
        hc_add_series(
          data = data_vis$`Foreign Mutual Fund`,
          name = "Foreign Mutial Fund",
          type = "column"
        ) %>% 
        hc_add_series(
          data = data_vis$Retail,
          name = "Retail",
          color = "orange",
          type = "column"
        ) %>% 
        hc_add_series(
          data = data_vis$Price,
          name = "Stock Price",
          type = "line",
          yAxis = 1
        ) %>% 
        hc_title(text = "This is a title with <i>margin</i> and <b>Strong or bold text</b>",
                 margin = 20, align = "left",
                 style = list(color = "#ffc000", useHTML = TRUE)) %>%
        hc_subtitle(text = "And this is a subtitle with more information",
                    align = "left", style = list(color = "#2b908f", fontWeight = "bold")) %>% 
        hc_tooltip(split = FALSE, shared = TRUE) %>% 
        hc_add_theme(hc_theme_monokai())
      
      
    })
    
    # Market Analysis - Fund Cash Level ---------------------------------------
    output$cash_chart <- renderHighchart({
      
      con2 <- dbConnect(MySQL(),
                        user = "Alvin",
                        password = "Incorrect123",
                        dbname = "researchdb",
                        host = "192.168.10.83")
      con <- con2
      conn <- con2
      
      dbListTables(conn)
      
      
      # parameterize
      
      input_ticker <- input$cash_ticker
      start_date <- input$cash_date[1]
      end_date <- input$cash_date[2]
      field <- input$cash_field
      
      # get data
      
      lv3_flow_ksei <- tbl(conn, "lv3_flow_ksei") %>% 
        filter(Fields %in% c("Value","Value Chg") & Date >= start_date, Date <= end_date) %>% 
        collect() %>% 
        select(-ID_Unique)
      
      lv3_aum_industry <- tbl(conn, "lv3_aum_industry") %>% 
        collect()
      
      lv3_px_stocks <- tbl(conn, "lv3_px_stocks") %>% 
        filter(Ticker==input_ticker, fields %in% field) %>% 
        select(c(Date, Value)) %>% 
        collect()
      
      # data aggregation
      
      lv3_aum_industry <- lv3_aum_industry %>% 
        select(-ID_Unique) %>% 
        filter(Fields == "AUM" & Category %in% c("IDR", "USD")) %>% 
        group_by(Fields, Date, Fund) %>% 
        summarise(Value = sum(Value, na.rm = TRUE)) %>% 
        ungroup() %>% 
        select(Fund, Date, Value) %>% 
        pivot_wider(
          names_from = "Fund",
          values_from = "Value"
        ) %>% 
        transmute(
          `Equity AUM` = Equity + ETF + Index + Mixed * 0.8,
          Date = ymd(Date),
          Date = floor_date(Date, unit = "month")
        ) %>% 
        complete(
          Date = seq.Date(
            from = min(Date), to =  max(Date), by="months"
          )
        ) %>% 
        mutate(Date = Date + months(1) - days(1))
      
      lv3_px_stocks <- lv3_px_stocks %>% 
        mutate_at("Date", ymd) %>% 
        group_by(
          year = year(Date), month = month(Date)
        ) %>% 
        filter(Date == max(Date)) %>% 
        mutate(
          Date = floor_date(Date, unit = "month") + months(1) - days(1)
        ) %>% 
        ungroup() %>% 
        select(Date, Price = Value)
      
      local_mf <- lv3_flow_ksei %>% 
        filter(Fields == "Value", Shareholder == "Local.MF", Type == "EQUITY") %>% 
        group_by(Date) %>% 
        summarise(Value = sum(Value, na.rm = TRUE)) %>% 
        ungroup() %>% 
        select(Date, Local.MF = Value) %>% 
        mutate_at("Date", ymd)
      
      data_agg <- lv3_aum_industry %>% 
        left_join(local_mf, by = "Date") %>% 
        left_join(lv3_px_stocks, by = "Date") %>% 
        mutate(`Cash Level` = 1-Local.MF/`Equity AUM`) %>% 
        mutate_if(is.numeric, ~round(., digits = 2))
      
      # data vis
      
      data_vis <- xts(data_agg %>%  select(-Date), order.by = data_agg$Date)
      
      lapply(dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
      
      highchart(type = "stock") %>% 
        hc_yAxis_multiples(
          list(lineWidth = 1),
          list(opposite = FALSE)
        ) %>% 
        hc_add_series(data_vis$`Cash Level`, name = "Cash Level", yAxis = 1) %>%
        hc_add_series(data_vis$Price, name = paste0("Stock Price | ",input_ticker)) %>% 
        hc_title(text = "This is a title with <i>margin</i> and <b>Strong or bold text</b>",
                 margin = 20, align = "left",
                 style = list(color = "#ffc000", useHTML = TRUE)) %>%
        hc_subtitle(text = "And this is a subtitle with more information",
                    align = "left", style = list(color = "#2b908f", fontWeight = "bold")) %>% 
        hc_tooltip(split = FALSE, shared = TRUE) %>% 
        hc_add_theme(hc_theme_monokai())
      
      
      
      
    })
    
    # Non Financial Modelling    ----------------------
    
    nf_model <- reactive({
      
      inFile <- input$nf_assumption
      
      if (is.null(inFile)) {
        return(NULL)
        
      } else {
        file_assumption <-  inFile$datapath  
        
        unit_scale <- case_when(input$nf_scale == "Normal" ~ "1",
                                input$nf_scale == "Thousands" ~ "1000",
                                input$nf_scale == "Millions" ~ "1000000",
                                TRUE ~ "1000000000"
        ) %>% 
          as.numeric()
        currency <- input$nf_currency
        Year_Back <- input$nf_year_back
        Ticker_Name <- input$nf_ticker
        user <- input$nf_user
        
        print("processing")
        non_financial(Ticker_Name = Ticker_Name, Year_Back = Year_Back, currency = currency, unit_scale = unit_scale, user = user, 
                      file_assumption = file_assumption)
      }
      
    })
    
    output$nf_table_out <- DT::renderDataTable({
      
      output <- nf_model()
      
      (output$`Visual Table`[[input$nf_table]])[ , -2] 
      
      
    })
    
    
    # Financial Modeling -----------------
    
    f_model <- reactive({
      
      inFile1 <- input$f_assumption_company
      inFile2 <- input$f_assumption_macro
      inFile3 <- input$f_assumption_interest
      
      if ( is.null(inFile1) | is.null(inFile2) | is.null(inFile3) ) {
        return(NULL)
        
      } else {
        company_assumption <-  inFile1$datapath  
        macro_assumption <-  inFile2$datapath  
        interest_assumption <-  inFile3$datapath  
        
        unit_scale <- case_when(input$f_scale == "Normal" ~ "1",
                                input$f_scale == "Thousands" ~ "1000",
                                input$f_scale == "Millions" ~ "1000000",
                                TRUE ~ "1000000000") %>% 
          as.numeric()
        currency <- input$f_currency
        Year_Back <- input$f_year_back
        Ticker_Name <- input$f_ticker
        user <- input$f_user
        
        print("processing")
        financial(Ticker_Name = Ticker_Name, Year_Back = Year_Back, currency = currency, unit_scale = unit_scale, user = user, 
                  company_assumption = company_assumption, macro_assumption = macro_assumption, interest_assumption = interest_assumption
        )
      }
      
    })
    
    output$f_table_out <- DT::renderDataTable({
      
      output <- f_model()
      
      (output$`Visual Table`[[input$f_table]])[ , -2] 
      
      
    })
    
    # Tools PE Calculation -----------------
    
    # PE Forecast ------------------
    
    output$tools_pe_viz <- renderHighchart({
      
      Input.Ticker <- input$tools_pe_ticker
      
      Input.Assumption <- input$tools_pe_growth %>% str_split(",") %>% unlist() %>% as.numeric()
      
      visualize_pe(Input.Ticker = Input.Ticker, Input.Assumption = Input.Assumption)
    })
    
    # PE Relative --------------------
    
    output$tools_pe_relative_sector <- renderHighchart({
      
      input_ticker <- input$tools_pe_ticker
      
      Input.Grouping <- input$tools_pe_group 
      
      Input.Index <- input$tools_pe_index 
      
      input_ordo <- input$tool_pe_ordo %>% as.numeric()
      
      visualize_relative_sector(Input.Grouping = Input.Grouping, Input.Index = Input.Index, input_ticker = input_ticker, input_ordo = input_ordo)
    })
    
    output$tools_pe_relative_index <- renderHighchart({
      
      input_ticker <- input$tools_pe_ticker
      
      Input.Grouping <- input$tools_pe_group 
      
      Input.Index <- input$tools_pe_index 
      
      input_ordo <- input$tool_pe_ordo %>% as.numeric()
      
      visualize_relative_index(Input.Grouping = Input.Grouping, Input.Index = Input.Index, input_ticker = input_ticker, input_ordo = input_ordo)
    })
    
    
    # Market Monitor -------------------
    
    output$market_table <- renderUI({
      
      currency <- input$market_currency
      
      showModal(modalDialog(title = "Processing")) 
      
      market_monitor(currency = currency)
    })
    
    # Screen Data ----------------------
    
    output$screen_table <- DT::renderDataTable({
      
      screen_local_criteria(input$tools_screen)
      
    })
    
    
    }
  
)